module(
    name = "lillymol",
    version = "1.2.0",
)

# Periodically check the bazel central registry for new versions.
# https://github.com/bazelbuild/bazel-central-registry/tree/main/modules

http_file = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl", "http_file"
)
http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive"
)
http_archive(
    name = "libcxxwrap_julia",
    urls = ["https://github.com/JuliaInterop/libcxxwrap-julia/archive/refs/tags/v0.13.3.tar.gz"],
    sha256 = "83db0ce4a240285d014b0bb2744827a36ec160459bee0aece2d46dc5be895299",
    strip_prefix = "libcxxwrap-julia-0.13.3",
    build_file_content = """
cc_library(
    name = "libcxxwrap_julia",
    srcs = glob(["src/*.cpp"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
    """,
)




# There are newer versions of absl, but there seem to be incompatibilities with
# other Google tools, proto and re2. Hopefully will resolve eventually...
bazel_dep(name = "abseil-cpp", version = "20240116.2", repo_name="com_google_absl")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "caseyduquettesc_rules_python_pytest", version = "1.1.0", repo_name = "rules_python_pytest")
bazel_dep(name = "eigen", version = "3.4.0", repo_name="com_gitlab_libeigen_eigen")
# bazel_dep(name = "gazelle", version = "0.38.0")
bazel_dep(name = "highwayhash", version = "0.0.0-20240305-5ad3bf8")

# Does not work inside Lilly, link error half way through the build.
#bazel_dep(name = "libzmq", version = "4.3.5")

bazel_dep(name = "google_benchmark", version = "1.8.5", repo_name="benchmark")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "nanobind_bazel", version = "2.1.0")
bazel_dep(name = "onetbb", version = "2021.13.0", repo_name="onetbb")
# Version 27.0 works for c++, but does not work with python 3.11
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "protobuf", version = "29.0", repo_name="com_google_protobuf")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
# bazel_dep(name = "pybind11_protobuf", version = "2.11.1.bzl.3")
bazel_dep(name = "re2", version = "2024-07-02")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "rules_go", version = "0.49.0")
# bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "7.0.2")
# bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")
# Beware, adding this version will cause a bump in the
# protoc version to an incompatible version.
# We are getting py_proto_library from "protobuf" so this
# is not really needed.
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "gazelle", version = "0.40.0")

# bazel_dep(name = "rules_proto_grpc", version = "5.0.0")
# bazel_dep(name = "rules_proto_grpc_cpp", version = "5.0.0")

bazel_dep(name = "rules_ruby", version = "0.12.0")
bazel_dep(name = "tomlplusplus", version = "3.4.0")
bazel_dep(name = "zlib", version = "1.3.1.bcr.3")
bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")

# Local repositories

bazel_dep(name = "data", version = "1.0.0")
local_path_override(
    module_name = "data",
    path = "../data"
)

bazel_dep(name = "third_party", version = "1.0.0")
local_path_override(
    module_name = "third_party",
    path = "../third_party"
)
